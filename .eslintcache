[{"/Users/lpatiny/git/cheminfo-js/screening/src/__tests__/iconnmr.test.js":"1","/Users/lpatiny/git/cheminfo-js/screening/src/__tests__/plate.test.js":"2","/Users/lpatiny/git/cheminfo-js/screening/src/__tests__/range.test.js":"3","/Users/lpatiny/git/cheminfo-js/screening/src/iconnmr.js":"4","/Users/lpatiny/git/cheminfo-js/screening/src/index.js":"5","/Users/lpatiny/git/cheminfo-js/screening/src/plate.js":"6","/Users/lpatiny/git/cheminfo-js/screening/src/util.js":"7","/Users/lpatiny/git/cheminfo-js/screening/src/__tests__/util.test.js":"8"},{"size":468,"mtime":1585065601219,"results":"9","hashOfConfig":"10"},{"size":414,"mtime":1585065198894,"results":"11","hashOfConfig":"10"},{"size":424,"mtime":1585065212271,"results":"12","hashOfConfig":"10"},{"size":1848,"mtime":1585065003102,"results":"13","hashOfConfig":"10"},{"size":155,"mtime":1585065041068,"results":"14","hashOfConfig":"10"},{"size":2189,"mtime":1585065196550,"results":"15","hashOfConfig":"10"},{"size":1051,"mtime":1585065351382,"results":"16","hashOfConfig":"10"},{"size":1087,"mtime":1585065363427,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12t78v4",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lpatiny/git/cheminfo-js/screening/src/__tests__/iconnmr.test.js",[],"/Users/lpatiny/git/cheminfo-js/screening/src/__tests__/plate.test.js",[],"/Users/lpatiny/git/cheminfo-js/screening/src/__tests__/range.test.js",[],"/Users/lpatiny/git/cheminfo-js/screening/src/iconnmr.js",[],"/Users/lpatiny/git/cheminfo-js/screening/src/index.js",["37"],"export Util from './util.js';\nlet Plate = require('./plate.js');\nlet IconNMR = require('./iconnmr.js');\n\nmodule.exports = {\n  Util,\n  Plate,\n  IconNMR,\n};\n","/Users/lpatiny/git/cheminfo-js/screening/src/plate.js",["38","39","40","41"],"import { positionToNumber, numberToPosition } from './util.js';\n/*\nindex starts at 1 !\n\n */\n\nexport class Plate {\n  constructor(options) {\n    options = options || {};\n\n    this.width = options.width || 12;\n    this.height = options.height || (this.width / 3) * 2;\n    this.size = this.width * this.height;\n    this.initialize();\n  }\n\n  getWells() {\n    return this.wells;\n  }\n\n  select(range) {\n    if (range) {\n      this.wells.forEach(function (well) {\n        well.selected = false;\n      });\n      let reg = /(\\d+)(-(\\d+))?,?/g;\n      let m;\n      while ((m = reg.exec(range))) {\n        let from = +m[1];\n        let to = +m[3];\n        if (to && from <= to) {\n          for (let i = from; i <= to; i++) {\n            let well = this.wells[i - 1];\n            if (!isEmpty(well.info)) well.selected = true;\n          }\n        } else {\n          let well = this.wells[from - 1];\n          if (!isEmpty(well.info)) well.selected = true;\n        }\n      }\n    } else {\n      this.wells.forEach(function (well) {\n        if (isEmpty(well.info)) {\n          well.selected = false;\n        } else {\n          well.selected = true;\n        }\n      });\n    }\n  }\n\n  getArrayElement(index) {\n    return this.wells[index];\n  }\n\n  updateColor() {\n    this.wells.forEach(function (well) {\n      if (isEmpty(well.info)) {\n        well.color = 'white';\n      } else if (well.selected) {\n        well.info.color = 'rgba(144, 238, 144, 1)';\n      } else {\n        well.info.color = 'rgba(144, 238, 144, 0.3)';\n      }\n    });\n  }\n\n  getByPosition(position) {\n    return this.wells[positionToNumber(position, this.width) - 1];\n  }\n\n  getByNumber(number) {\n    return this.wells[number - 1];\n  }\n\n  initialize() {\n    this.wells = new Array(this.size);\n    for (let row = 0; row < this.height; row++) {\n      for (let column = 0; column < this.width; column++) {\n        let i = row * this.width + column;\n        this.wells[i] = {\n          number: i + 1,\n          position: numberToPosition(i + 1, this.width),\n          info: {},\n        };\n      }\n    }\n  }\n}\n\nfunction isEmpty(object) {\n  let isEmpty =\n    Object.keys(object).length === 0 && object.constructor === Object;\n  return isEmpty;\n}\n","/Users/lpatiny/git/cheminfo-js/screening/src/util.js",["42"],"/*\n Convert 'A5' to\n */\nexport function positionToNumber(position, width) {\n  if (width === undefined) {\n    throw Error('need to specify width for numberToPosition');\n  }\n  position = position.toUpperCase().replace(/[^0-9A-Z]/g, '');\n  let string = position.replace(/[0-9]+/, '');\n  let number = position.replace(/[A-Z]+/, '');\n  return (stringToNumber(string) - 1) * width + number * 1;\n}\n\nexport function numberToPosition(number, width) {\n  if (width === undefined) {\n    throw Error('need to specify width for numberToPosition');\n  }\n  number--;\n  return (\n    numberToString(Math.floor(number / width) + 1) + ((number % width) + 1)\n  );\n}\n\nexport function stringToNumber(string) {\n  let number = 0;\n  for (let i = 0; i < string.length; i++) {\n    number *= 26;\n    number += string.charCodeAt(i) - 64;\n  }\n  return number;\n}\n\nexport function numberToString(number) {\n  let string = '';\n  while (number != 0) {\n    string = String.fromCharCode(((number - 1) % 26) + 65) + string;\n    number = Math.floor((number - 1) / 26);\n  }\n  return string;\n}\n","/Users/lpatiny/git/cheminfo-js/screening/src/__tests__/util.test.js",[],{"ruleId":null,"fatal":true,"severity":2,"message":"43","line":1,"column":8},{"ruleId":"44","severity":1,"message":"45","line":26,"column":17,"nodeType":"46","messageId":"47","endLine":26,"endColumn":36},{"ruleId":"44","severity":1,"message":"48","line":26,"column":17,"nodeType":"46","messageId":"47","endLine":26,"endColumn":36},{"ruleId":"44","severity":1,"message":"45","line":26,"column":17,"nodeType":"46","messageId":"47","endLine":26,"endColumn":36},{"ruleId":"49","severity":1,"message":"50","line":92,"column":7,"nodeType":"51","endLine":92,"endColumn":14},{"ruleId":"52","severity":2,"message":"53","line":35,"column":17,"nodeType":"54","messageId":"55","endLine":35,"endColumn":19},"Parsing error: Unexpected token Util","prefer-named-capture-group","Capture group '(\\d+)' should be converted to a named or non-capturing group.","Literal","required","Capture group '(-(\\d+))' should be converted to a named or non-capturing group.","no-shadow","'isEmpty' is already declared in the upper scope.","Identifier","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]